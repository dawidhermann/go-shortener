// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: shortener.proto

package shortener_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClientClient is the client API for ShortenerClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClientClient interface {
	CreateShortenedUrl(ctx context.Context, in *CreateShortenedUrlRequest, opts ...grpc.CallOption) (*CreateShortenedUrlResponse, error)
	DeleteShortenedUrl(ctx context.Context, in *DeleteShortenedUrlRequest, opts ...grpc.CallOption) (*DeleteShortenedUrlResponse, error)
}

type shortenerClientClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClientClient(cc grpc.ClientConnInterface) ShortenerClientClient {
	return &shortenerClientClient{cc}
}

func (c *shortenerClientClient) CreateShortenedUrl(ctx context.Context, in *CreateShortenedUrlRequest, opts ...grpc.CallOption) (*CreateShortenedUrlResponse, error) {
	out := new(CreateShortenedUrlResponse)
	err := c.cc.Invoke(ctx, "/shortener.ShortenerClient/CreateShortenedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClientClient) DeleteShortenedUrl(ctx context.Context, in *DeleteShortenedUrlRequest, opts ...grpc.CallOption) (*DeleteShortenedUrlResponse, error) {
	out := new(DeleteShortenedUrlResponse)
	err := c.cc.Invoke(ctx, "/shortener.ShortenerClient/DeleteShortenedUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerClientServer is the server API for ShortenerClient service.
// All implementations must embed UnimplementedShortenerClientServer
// for forward compatibility
type ShortenerClientServer interface {
	CreateShortenedUrl(context.Context, *CreateShortenedUrlRequest) (*CreateShortenedUrlResponse, error)
	DeleteShortenedUrl(context.Context, *DeleteShortenedUrlRequest) (*DeleteShortenedUrlResponse, error)
	mustEmbedUnimplementedShortenerClientServer()
}

// UnimplementedShortenerClientServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerClientServer struct {
}

func (UnimplementedShortenerClientServer) CreateShortenedUrl(context.Context, *CreateShortenedUrlRequest) (*CreateShortenedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateShortenedUrl not implemented")
}
func (UnimplementedShortenerClientServer) DeleteShortenedUrl(context.Context, *DeleteShortenedUrlRequest) (*DeleteShortenedUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShortenedUrl not implemented")
}
func (UnimplementedShortenerClientServer) mustEmbedUnimplementedShortenerClientServer() {}

// UnsafeShortenerClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerClientServer will
// result in compilation errors.
type UnsafeShortenerClientServer interface {
	mustEmbedUnimplementedShortenerClientServer()
}

func RegisterShortenerClientServer(s grpc.ServiceRegistrar, srv ShortenerClientServer) {
	s.RegisterService(&ShortenerClient_ServiceDesc, srv)
}

func _ShortenerClient_CreateShortenedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateShortenedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerClientServer).CreateShortenedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.ShortenerClient/CreateShortenedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerClientServer).CreateShortenedUrl(ctx, req.(*CreateShortenedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShortenerClient_DeleteShortenedUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShortenedUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerClientServer).DeleteShortenedUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.ShortenerClient/DeleteShortenedUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerClientServer).DeleteShortenedUrl(ctx, req.(*DeleteShortenedUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ShortenerClient_ServiceDesc is the grpc.ServiceDesc for ShortenerClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShortenerClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.ShortenerClient",
	HandlerType: (*ShortenerClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateShortenedUrl",
			Handler:    _ShortenerClient_CreateShortenedUrl_Handler,
		},
		{
			MethodName: "DeleteShortenedUrl",
			Handler:    _ShortenerClient_DeleteShortenedUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shortener.proto",
}
